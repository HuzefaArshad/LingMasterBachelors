# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'IMAGE_TO_TEXT.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import pickle
import matplotlib as mpl
import pyperclip as pc
import matplotlib.pyplot as plt
import os
import sys
from PyQt5.QtWidgets import  QFileDialog,QDialog,QMessageBox,QLabel,QHBoxLayout,QProgressDialog, QWidget
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt,QFileInfo
from tkinter import ttk
# from MainScreen import Ui_MainWindow

class Ui_MainWindow2(object):
#     def Main_Screen(self):
#         self.window1 = QtWidgets.QMainWindow()
#         self.ui = Ui_MainWindow()
#         self.ui.setupUi(self.window1)
#         self.window1.show()    
    def __init__(self):
            self.geek=''
            
    def wrapfun(self):
           self.OpenFile()
    
    def viewImage(self):
        
        self.View_Image(self.geek[0])

    def View_Image(self, imagePath):
        myDialog = QDialog(None, QtCore.Qt.WindowCloseButtonHint | QtCore.Qt.WindowTitleHint)
        myDialog.setWindowTitle("View Image")
        myDialog.setFixedSize(900, 600)
        myDialog.setStyleSheet("background-color:white;")
        hbox = QHBoxLayout(myDialog)
        label = QLabel(myDialog)
        label.setStyleSheet("font: 75 16pt \"MS Shell Dlg 2\";\n"
                            "border-color:white;")
        pixmap = QPixmap(imagePath)
        if pixmap.height() > 800 or pixmap.width() > 1000:
            if pixmap.height() > pixmap.width():
                pixmap5 = pixmap.scaled(300, 450)
            else:
                pixmap5 = pixmap.scaled(450, 300)
            label.setPixmap(pixmap5)
        else:
            label.setPixmap(pixmap)
        label.setAlignment(Qt.AlignCenter)
        hbox.addWidget(label)
        myDialog.exec()
    def Copyfun(self):
            text1 = self.textEdit_2.toPlainText().strip()
  
# copying text to clipboard
            pc.copy(text1)
            
    def _show_progress(self):
        self.comp = 0
        while self.comp < 100:
            self.comp += 0.0001
            self.progressBar.setValue(self.comp)
    
    #Open File Dialog
    def OpenFile(self):
        file_filter='Image File (*.JPG)'
        fname = QFileDialog.getOpenFileNames(
                # parent=self,
                caption='Select an image file',
                directory=os.getcwd(),
                filter=file_filter,
                initialFilter='Image File (*.JPG)'
        )
        self.geek = fname[0]
        # filename = QFileInfo(fname[0]).fileName()
        # self.imagePath = fname[0]
        if not self.geek == "":
            self.progressBar.setVisible(True)
            self._show_progress()
        #     self.label_12.setText(filename)
        #     QMessageBox.about("hell", "Title", "Message")
            self.pushButton_2.setVisible(True)
            self.pushButton_3.setVisible(True)
        #     print("datanewdata===>",self.geek[0])
         
    def ocr(self):
                word_dict = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B',
                        12: 'C',
                        13: 'D', 14: 'E', 15: 'F', 16: 'G', 17: 'H', 18: 'I', 19: 'J', 20: 'K', 21: 'L', 22: 'M', 23: 'N',
                        24: 'O',
                        25: 'P', 26: 'Q', 27: 'R', 28: 'S', 29: 'T', 30: 'U', 31: 'V', 32: 'W', 33: 'X', 34: 'Y', 35: 'Z',
                        36: 'a',
                        37: 'b', 38: 'c', 39: 'd', 40: 'e', 41: 'f', 42: 'g', 43: 'h', 44: 'i', 45: 'j', 46: 'k', 47: 'l',
                        48: 'm',
                        49: 'n', 50: 'o', 51: 'p', 52: 'q', 53: 'r', 54: 's', 55: 't', 56: 'u', 57: 'v', 58: 'w', 59: 'x',
                        60: 'y',
                        61: 'z'}
                s=" "
                pickle_in = open("model_trained.p", "rb")
                model = pickle.load(pickle_in)
                outputlist = []
                image = cv2.imread(self.geek[0])
                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                saltpep = cv2.fastNlMeansDenoising(gray, None, 9, 13)
                # blured = cv2.blur(saltpep, (3, 3))
                ret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY_INV)
                kernel = np.ones((5, 100), np.uint8)
                img_dilation = cv2.dilate(thresh, kernel, iterations=1)
                ctrs, hier = cv2.findContours(img_dilation.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

                # sort contours,
                sorted_ctrs = sorted(ctrs, key=lambda ctr: cv2.boundingRect(ctr)[1])

                for i, ctr in enumerate(sorted_ctrs):
                        x, y, w, h = cv2.boundingRect(ctr)
                        roi = image[y:y + h, x:x + w]
                        im = cv2.resize(roi, None, fx=4, fy=4, interpolation=cv2.INTER_CUBIC)
                        ret_1, thresh_1 = cv2.threshold(im, 127, 255, cv2.THRESH_BINARY_INV)
                        kernel = np.ones((10, 20), np.uint8)
                        words = cv2.dilate(thresh_1, kernel, iterations=1)
                        words = cv2.cvtColor(words, cv2.COLOR_BGR2GRAY);
                        ctrs_1, hier = cv2.findContours(words, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                        sorted_ctrs_1 = sorted(ctrs_1, key=lambda ctr: cv2.boundingRect(ctr)[0])
                        for j, ctr_1 in enumerate(sorted_ctrs_1):
                                x_1, y_1, w_1, h_1 = cv2.boundingRect(ctr_1)
                                roi_1 = thresh_1[y_1:y_1 + h_1, x_1:x_1 + w_1]
                                chars = cv2.cvtColor(roi_1, cv2.COLOR_BGR2GRAY);
                                kernel = np.ones((10, 1), np.uint8)
                                joined = cv2.dilate(chars, kernel, iterations=1)
                                imgOriginal = joined
                                img = np.asarray(imgOriginal)
                                img = cv2.resize(img, (64, 64))
                                img = img.reshape(1, 64, 64, 1)
                                classIndex = word_dict[int(model.predict_classes(img))]
                                predictions = model.predict(img)
                                probVal = np.amax(predictions)
                                outputlist.append(classIndex)
                res=(s.join(outputlist))
                # self.textEdit_2.setLineWrapMode(outputlist)
                # print(res)
                self.textEdit_2.append(res)
                # for elem in outputlist:
                # #         print("data==>",elem)
                #         self.textEdit_2.append(elem)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(857, 443)
        MainWindow.setStyleSheet("background-color: #272743")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.seperator_summary = QtWidgets.QFrame(self.centralwidget)
        self.seperator_summary.setGeometry(QtCore.QRect(150, 0, 21, 441))
        self.seperator_summary.setStyleSheet("width:70px")
        self.seperator_summary.setFrameShape(QtWidgets.QFrame.VLine)
        self.seperator_summary.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.seperator_summary.setObjectName("seperator_summary")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 310, 101, 31))
        self.label_3.setStyleSheet("font-size:15pt;\n"
"color:rgb(255, 255, 253);\n"
"font: SMILEN;")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(40, 340, 101, 31))
        self.label_4.setStyleSheet("font-size:15pt;\n"
"color:rgb(255, 255, 253);\n"
"font: SMILEN;")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(40, 370, 101, 31))
        self.label_5.setStyleSheet("font-size:15pt;\n"
"color:rgb(255, 255, 253);\n"
"font: SMILEN;")
        self.label_5.setObjectName("label_5")
        self.textEdit_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_4.setGeometry(QtCore.QRect(170, 10, 651, 121))
        self.textEdit_4.setStyleSheet("background-color:white;")
        self.textEdit_4.setPlaceholderText("")
        self.textEdit_4.setObjectName("textEdit_4")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(180, 20, 231, 31))
        self.label_6.setStyleSheet("font: 75 italic 15pt \"MS Sans Serif\";\n"
"color: rgb(0, 39, 118);\n"
"background-color:white;")
        self.label_6.setObjectName("label_6")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(180, 60, 131, 41))
        self.pushButton.setStyleSheet("background-color: rgb(186, 232, 232);\n"
"color: rgb(45, 102, 142);\n"
"font: SMILEN;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-radius:10px;\n"
"font:bold 12px;\n"
"border-color:black;\n"
"padding:10px;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.wrapfun)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setVisible(False)
        self.pushButton_2.setGeometry(QtCore.QRect(680, 20, 131, 41))
        self.pushButton_2.setStyleSheet("background-color: rgb(186, 232, 232);\n"
"color: rgb(45, 102, 142);\n"
"font: SMILEN;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-radius:10px;\n"
"font:bold 12px;\n"
"border-color:black;\n"
"padding:10px;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.viewImage)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setVisible(False)
        self.pushButton_3.setGeometry(QtCore.QRect(680, 70, 131, 41))
        self.pushButton_3.setStyleSheet("background-color: rgb(186, 232, 232);\n"
"color: rgb(45, 102, 142);\n"
"font: SMILEN;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-radius:10px;\n"
"font:bold 12px;\n"
"border-color:black;\n"
"padding:10px;")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.ocr)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(170, 140, 681, 23))
        self.progressBar.setVisible(False)
        self.progressBar.setStyleSheet("color:white;")
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(170, 180, 571, 241))
        self.textEdit_2.setStyleSheet("background-color:white;")
        self.textEdit_2.setObjectName("textEdit_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(750, 330, 81, 41))
        self.pushButton_4.setStyleSheet("background-color: rgb(186, 232, 232);\n"
"color: rgb(45, 102, 142);\n"
"font: SMILEN;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-radius:10px;\n"
"font:bold 12px;\n"
"border-color:black;\n"
"padding:10px;")
        self.pushButton_4.setObjectName("pushButton_4")
        # self.pushButton_4.clicked.connect(self.Main_Screen)
        # self.pushButton_4.clicked.connect(MainWindow.close)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(0, 10, 171, 151))
        self.label_7.setStyleSheet("background-color: #272743")
        self.label_7.setText("")
        self.label_7.setPixmap(QtGui.QPixmap("C:/Users/HAJI/Desktop/LINGMASTER/LM.png"))
        self.label_7.setScaledContents(True)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(0, 160, 161, 131))
        self.label_8.setStyleSheet("background-color: #272743")
        self.label_8.setText("")
        self.label_8.setPixmap(QtGui.QPixmap("C:/Users/HAJI/Desktop/LINGMASTER/Convert Image to Text.png"))
        self.label_8.setScaledContents(True)
        self.label_8.setObjectName("label_8")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(750, 280, 81, 41))
        self.pushButton_5.setStyleSheet("background-color: rgb(186, 232, 232);\n"
"color: rgb(45, 102, 142);\n"
"font: SMILEN;\n"
"border-style:outset;\n"
"border-width:2px;\n"
"border-radius:10px;\n"
"font:bold 12px;\n"
"border-color:black;\n"
"padding:10px;")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.Copyfun)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Convert"))
        self.label_4.setText(_translate("MainWindow", "Image"))
        self.label_5.setText(_translate("MainWindow", "To Text"))
        self.textEdit_4.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_6.setText(_translate("MainWindow", "Upload An Image"))
        self.pushButton.setText(_translate("MainWindow", "Choose File"))
        self.pushButton_2.setText(_translate("MainWindow", "VIEW IMAGE"))
        self.pushButton_3.setText(_translate("MainWindow", "CONVERT"))
        self.textEdit_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.textEdit_2.setPlaceholderText(_translate("MainWindow", "Converted Text.."))
        self.pushButton_4.setText(_translate("MainWindow", "HOME"))
        self.pushButton_5.setText(_translate("MainWindow", "COPY"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow2()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
